#This estimates the dispersion per gene
dds <- estimateDispersions(dds)
#Plot out the dispersions
plotDispEsts(dds)
#Call DE genes using the Wald Test
dds <- nbinomWaldTest(dds)
#Extract results for a pair-wise contrast
resultsTable <- results(dds, contrast=c("genotype","WT","h3h3"))
head(resultsTable)
nrow(resultsTable[resultsTable$padj < 0.05,])
nrow(na.omit(resultsTable[resultsTable$padj < 0.05,]))
nrow(resultsTable[na.omit(resultsTable$padj < 0.05),])
na.omit(resultsTable[resultsTable$padj < 0.05,])
resultsTable[na.omit(resultsTable$padj < 0.05),]
resultsTable[resultsTable$padj < 0.05,]
resultsTable[na.omit(resultsTable$padj) < 0.05,]
resultsTable[na.omit(resultsTable$padj) < 0.05,]
#Extract results for a pair-wise contrast
resultsTable <- as.data.frame(results(dds, contrast=c("genotype","WT","h3h3")))
head(resultsTable)
resultsTable[na.omit(resultsTable$padj) < 0.05,]
resultsTable[resultsTable$padj < 0.05,]
na.omit(resultsTable[resultsTable$padj < 0.05,])
nrow(na.omit(resultsTable[resultsTable$padj < 0.05,]))
#Load DESeq2
library(DESeq2)
#Create the DESeq2 object from the HTSeqCount tables
dds <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = "count_data",
design= ~ genotype)
#Change factor levels so WT is considered the reference genotype
dds$genotype <- relevel(dds$genotype, ref = "WT")
#Show the dds object
dds
#Prefilter
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
#Show the dds object
dds
#Estimate Size Factor - library size
dds <- estimateSizeFactors(dds)
#Show the library size adjustment
dds$sizeFactor
#Estimate the dispersion
#This estimates the dispersion per gene
dds <- estimateDispersions(dds)
#Plot out the dispersions
plotDispEsts(dds)
#Call DE genes using the Wald Test
dds <- nbinomWaldTest(dds)
#Extract results for a pair-wise contrast
resultsTable <- as.data.frame(results(dds, contrast=c("genotype","WT","h3h3")))
#Show how many genes padj < 0.05
nrow(na.omit(resultsTable[resultsTable$padj < 0.05,]))
head(resultsTable)
#Genes with 2-fold change or log2FC = 1
nrow(na.omit(resultsTable[resultsTable$padj < 0.05 & resultsTable$log2FoldChange >= 1,]))
install.packages("pheatmap")
#Plot sample heatmap
library(pheatmap)
library(RColorBrewer)
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$condition, vsd$type, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
#Variance stabilizing transformation
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
#Plot sample heatmap
library(pheatmap)
library(RColorBrewer)
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$condition, vsd$type, sep="-")
#Variance stabilizing transformation
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
#Calculate distance between samples
sampleDists <- dist(t(assay(vsd)))
#Plot sample heatmap
library(pheatmap)
library(RColorBrewer)
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$condition, vsd$type, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$genotype, vsd$type)
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
vsd
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(colnames(vsd), vsd$type, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
#Variance stabilizing transformation
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
#Calculate distance between samples
sampleDists <- dist(t(assay(vsd)))
#Plot sample heatmap
library(pheatmap)
library(RColorBrewer)
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(colnames(vsd), vsd$type)
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
#PCA of the samples
plotPCA(vsd, intgroup=c("genotype", "type"))
#PCA of the samples
plotPCA(vsd, intgroup=c(colData(dds)))
dds
#PCA of the samples
plotPCA(vsd, intgroup=c(colnames(dds)))
vsd
#PCA of the samples
plotPCA(vsd, intgroup=c("genotype"))
plotCounts(dds, gene="AT2G41850", intgroup="condition")
plotCounts(dds, gene="AT2G41850", intgroup="genotype")
plotCounts(dds, gene="AT2G41850", intgroup="genotype", returnData = TRUE)
#Plot counts for the PGAZAT gene
plotCounts(dds, gene="AT2G41850", intgroup="genotype")
#Return the data table
plotCounts(dds, gene="AT2G41850", intgroup="genotype", returnData = TRUE)
pgazat <- plotCounts(dds, gene="AT2G41850", intgroup="genotype", returnData = TRUE)
#Volcano Plot
plotMA(resultsTable, ylim=c(-2,2))
#Plot counts for the PGAZAT gene
plotCounts(dds, gene="AT2G41850", intgroup="genotype")
#Volcano Plot
plotMA(results(dds, contrast=c("genotype","WT","h3h3")), ylim=c(-2,2))
#Plot counts for the PGAZAT gene
plotCounts(dds, gene="AT2G41850", intgroup="genotype")
#Plot counts for the PGAZAT gene
plotCounts(dds, gene="AT2G41850", intgroup="genotype")
#Volcano Plot
plotMA(results(dds, contrast=c("genotype","WT","h3h3")), ylim=c(-2,2))
head(resultsTable)
dds
dds@colData
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds$condition),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds$condition == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c("condition",conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
res <- makeResultsTable(dds,"WT","h3h3")
res <- makeResultsTable(dds,WT,h3h3)
dds
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds$condition),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds$condition == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds$condition),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds$condition == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
res <- makeResultsTable(dds,"genotype","WT","h3h3")
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds[compFactor,]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds[compFactor,] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
res <- makeResultsTable(dds,"genotype","WT","h3h3")
dds["genotype",]
dds["genotype"]
dds["genotype"]
dds$genotype
dds[]
dds[colData="genotype",]
dds[colData="genotype",]
dds[dds$colData="genotype",]
dds[dds@colData="genotype",]
dds[dds@colData="genotype"]
dds[colData="genotype"]
dds[dds$colData="genotype"]
compFactor
compFactor="genotype"
dds$compFactor
dds$genotype
dds@colData
dds@colData["genotype"]
dds@colData["genotype",]
dds@colData["genotype"]
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
res <- makeResultsTable(dds,"genotype","WT","h3h3")
levels(dds@colData[compFactor])
dds@colData[compFactor]
as.vector(dds@colData[compFactor])
dds@colData[compFactor]
factor(dds@colData[compFactor])
dds@colData[compFactor,]
dds@colData[,compFactor]
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
res <- makeResultsTable(dds,"genotype","WT","h3h3")
res
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3")
head(res)
library(ggplot2)
ggplot2(res) + geom_point(aes(x=WT,y=h3h3))
ggplot(res) + geom_point(aes(x=WT,y=h3h3))
ggplot(res) + geom_point(aes(x=baseMeanA,y=baseMeanB))
ggplot(res) + geom_point(aes(x=log2(baseMeanA),y=log2(baseMeanB)))
res$sig <- ifelse(res$padj < 0.05,TRUE,FALSE)
head(res)
table(res$sig)
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3")
head(res)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & res$log2FC >= 1,1,0)
head(res)
table(res$sig)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & res$padj != NA & res$log2FC >= 1,1,0)
head(res)
table(res$sig)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & !(is.na(res$padj)) & res$log2FC >= 1,1,0)
head(res)
table(res$sig)
#Extract results for a pair-wise contrast
resultsTable <- as.data.frame(results(dds, contrast=c("genotype","WT","h3h3")))
head(resultsTable)
#Show how many genes padj < 0.05
nrow(na.omit(resultsTable[resultsTable$padj < 0.05,]))
#Genes with 2-fold change
nrow(na.omit(resultsTable[resultsTable$padj < 0.05 & resultsTable$log2FoldChange >= 1 | resultsTable$padj < 0.05 & resultsTable$log2FoldChange <= -1,]))
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & !(is.na(res$padj)) & res$log2FC >= 1 | res$padj < 0.05 & !(is.na(res$padj)) & res$log2FC <= -1,1,0)
head(res)
table(res$sig)
table(is.na(res$padj))
nrow(resultsTable[resultsTable$padj < 0.05 & resultsTable$log2FoldChange >= 1 | resultsTable$padj < 0.05 & resultsTable$log2FoldChange <= -1,])
nrow(resultsTable[resultsTable$padj < 0.05 & resultsTable$log2FoldChange >= 1 & !(is.na(resultsTable$padj)) | resultsTable$padj < 0.05 & resultsTable$log2FoldChange <= -1,])
nrow(resultsTable[resultsTable$padj < 0.05 & resultsTable$log2FoldChange >= 1 & !(is.na(resultsTable$padj)) | resultsTable$padj < 0.05 & resultsTable$log2FoldChange <= -1 & !(is.na(resultsTable$padj)),])
res$padj
ls
resultsTable[row.names(resultsTable) %in% res[res$sig==1,]$id,]
res[res$id=="AT2G44470",]
test <- data.frame(results(dds, contrast=c("genotype","WT","h3h3")))
test[row.names(test)=="AT2G44470",]
results(dds, contrast=c("genotype","WT","h3h3"))
test <- results(dds, contrast=c("genotype","WT","h3h3"))
test[row.names(test)=="AT2G44470",]
nrow(res)
nrow(resultsTable)
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3")
head(res)
res[res$id=="AT2G44470",]
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y1 <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y2 <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y2) <- c(1:nrow(y2))
return(y2)
}
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3")
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & res$log2FC >= 1 | res$padj < 0.05 & res$log2FC <= -1, 1, 0)
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y1 <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y2 <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y1)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y1$log2FoldChange,pval=y1$pvalue,padj=y1$padj)
row.names(y2) <- c(1:nrow(y2))
return(y2)
}
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3")
head(res)
res[res$id=="AT2G44470",]
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
print(y[y$id=="AT2G44470",])
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
print(y[y$id=="AT2G44470",])
row.names(y) <- c(1:nrow(y))
return(y)
}
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3")
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
print(y[row.names(y)=="AT2G44470",])
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
print(y[y$id=="AT2G44470",])
row.names(y) <- c(1:nrow(y))
return(y)
}
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3")
head(res)
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3",lfcThreshold=0,filter=TRUE)
head(res)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & res$log2FC >= 1 | res$padj < 0.05 & res$log2FC <= -1, 1, 0)
head(res)
table(res$sig)
ggplot(res) + geom_point(aes(x=WT,y=h3h3,color=sig))
ggplot(res) + geom_point(aes(x=sampleA,y=sampleB,color=sig))
head(res)
ggplot(res) + geom_point(aes(x=log2(baseMeanA),y=log2(baseMeanA),color=sig))
head(res)
ggplot(res) + geom_point(aes(x=log2(baseMeanA),y=log2(baseMeanB),color=sig))
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & res$log2FC >= 1 | res$padj < 0.05 & res$log2FC <= -1, "DE", "notDE")
head(res)
table(res$sig)
#Make the plot
ggplot(res) + geom_point(aes(x=log2(baseMeanA),y=log2(baseMeanB),color=sig))
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- "notDE"
res$sig <- ifelse(res$padj < 0.05 & res$log2FC >= 1 | res$padj < 0.05 & res$log2FC <= -1, "DE", "notDE")
head(res)
table(res$sig)
#Make the plot
ggplot(res) + geom_point(aes(x=log2(baseMeanA),y=log2(baseMeanB),color=sig))
res[is.na(res$sig),]
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & res$log2FC >= 1 & !is.na(res$padj) | res$padj < 0.05 & res$log2FC <= -1 & !is.na(res$padj) , "DE", "notDE")
head(res)
table(res$sig)
#Make the plot
ggplot(res) + geom_point(aes(x=log2(baseMeanA),y=log2(baseMeanB),color=sig))
#Volcano Plot
plotMA(results(dds, contrast=c("genotype","WT","h3h3")), ylim=c(-2,2))
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
