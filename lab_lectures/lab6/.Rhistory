a <- c(a,b,c,d,e)
a <- c("a","b","c","d","e")
a
is(a)
a[4]
a[d]
a["d"]
names(a) <- c("f","g","h","i","j")
a
a["j"]
names(a) <- c("f","g","h","j","j")
a
a["j"]
a <- matrix(nrow=2,ncol=2)
a
a <- matrix(data=c(1,2,3,4,5),nrow=2,ncol=2)
a <- matrix(data=c(1,2,3,4),nrow=2,ncol=2)
a
a[2,1]
a[2]
a[2,]
a[,2]
a
a[1,2] <- 10000
a
a[,2] <- 10000
a
b <- c(5,6)
a[,2] <- b
a
b <- c(5,6,7)
a[,2] <- b
dim(a)
df <- as.data.frame(a)
df
a
df <- data.frame()
rownames(a) <- c("a","b","c")
row.names(a) <- c("a","b","c")
colnames(a) <- c("a","b","c")
row.names(df) <- c("a","b","c")
colnames(df) <- c("a","b","c")
b
df$Var1 <- b
df$Var1 <- rbind(df,b)
df <- rbind(df,b)
df
df <- data.frame(Var1,Var2)
df <- data.frame(Var1=c(),Var2=c())
df
df <- data.frame(Var1=c(1,2,3))
df
df$Var1
a
df$Var2 <- c(1,2,3,4)
df$Var2 <- c(1,2,3)
df
df <- df$Var1
df
df <- as.dataframe(Var1=df$Var1)
df <- data.frame(Var1=c(1,2,3))
df$Var2 <- c(1,2,3)
df
df
df <- as.data.frame(Var1=df$Var1)
df <- as.data.frame(df$Var1)
df
df <- data.frame(V1=c(1,2,3),V2=c(5,6,7))
df
df[df$V1 >= 2,]
df[df$V1 >= 2 & df$V2 < 7,]
df[df$V1 >= 2 | df$V2 < 7,]
?read.table()
a
plot(a)
library(ggplot2)
qplot(a)
qplot(a) + geom_dotplot()
ggplot(df,aes(x=V1,y=V2))
ggplot(df,aes(x=V1,y=V2)) + geom_dotplot()
ggplot(df,aes(x=V1,y=V2)) + geom_point()
?ls()
vignette(ggplot2)
library(DESeq2)
library(GENESPACE)
vignette(GENESPACE)
vignette(ls())
vignette(ls
)
setwd("projects/PLB812/lab_lectures/lab6/")
#List files in directory
sampleFiles <- list.files("count_data")
sampleFiles
#Create sampleTable from the file names
sampleTable <- data.frame(sampleName = sub(".txt","",sampleFiles),
fileName = sampleFiles,
genotype = sub("-..txt","",sampleFiles))
sampleTable
#Set the genotype column to factor
sampleTable$genotype <- factor(sampleTable$genotype)
#Load DESeq2
library(DESeq2)
#Create the DESeq2 object from the HTSeqCount tables
dds <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = "count_data",
design= ~ genotype)
#Change factor levels so WT is considered the reference genotype
dds$genotype <- relevel(dds$genotype, ref = "WT")
#Show the dds object
dds
head(dds@assays)
head(dds@assays@data)
head(counts(dds))
#Prefilter
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
head(keep)
table(keep)
#Show the dds object
dds
#Estimate Size Factor - library size
dds <- estimateSizeFactors(dds)
#Show the library size adjustment
dds$sizeFactor
#Show the library size adjustment
dds$sizeFactor
#Estimate the dispersion
#This estimates the dispersion per gene
dds <- estimateDispersions(dds)
#Variance stabilizing transformation
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
#Calculate distance between samples
sampleDists <- dist(t(assay(vsd)))
#Plot sample heatmap
library(pheatmap)
library(RColorBrewer)
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(colnames(vsd), vsd$type)
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
plotPCA(dds, intgroup=c("genotype"))
plotPCA(dds, intgroup=c("genotype"))
#Call DE genes using the Wald Test
dds <- nbinomWaldTest(dds)
results(dds, contrast=c("genotype","WT","h3h3"))
#Extract results for a pair-wise contrast
resultsTable <- as.data.frame(results(dds, contrast=c("genotype","WT","h3h3")))
head(resultsTable)
#Show how many genes padj < 0.05
nrow(na.omit(resultsTable[resultsTable$padj < 0.05,]))
#Genes with 2-fold change
nrow(na.omit(resultsTable[resultsTable$padj < 0.05 & resultsTable$log2FoldChange >= 1 | resultsTable$padj < 0.05 & resultsTable$log2FoldChange <= -1,]))
#Volcano Plot
plotMA(results(dds, contrast=c("genotype","WT","h3h3")), ylim=c(-2,2))
#Function for making a table of results for two conditions from dds
makeResultsTable <- function(x,compFactor,conditionA,conditionB,lfcThreshold=0,filter=FALSE){
require(DESeq2)
bml <- sapply(levels(dds@colData[,compFactor]),function(lvl) rowMeans(counts(dds,
normalized=TRUE)[,dds@colData[,compFactor] == lvl]))
bml <- as.data.frame(bml)
y <- results(x,contrast=c(compFactor,conditionA,conditionB),
lfcThreshold=lfcThreshold,independentFiltering=filter)
y <- data.frame(id=gsub(pattern = "gene:",replacement = "",row.names(y)),
sampleA=c(conditionA),sampleB=c(conditionB),
baseMeanA=bml[,conditionA],baseMeanB=bml[,conditionB],
log2FC=y$log2FoldChange,pval=y$pvalue,padj=y$padj)
row.names(y) <- c(1:nrow(y))
return(y)
}
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3",lfcThreshold=0,filter=TRUE)
head(res)
head(res)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & res$log2FC >= 1 & !is.na(res$padj) | res$padj < 0.05 & res$log2FC <= -1 & !is.na(res$padj) , "DE", "notDE")
notDE
#Make new results table
res <- makeResultsTable(dds,"genotype","WT","h3h3",lfcThreshold=0,filter=TRUE)
head(res)
#Create a column where 1 = meets cutoff, 0 = does not meet cutoff
res$sig <- ifelse(res$padj < 0.05 & res$log2FC >= 1 & !is.na(res$padj) | res$padj < 0.05 & res$log2FC <= -1 & !is.na(res$padj) , "DE", "notDE")
head(res)
table(res$sig)
#Make the plot
ggplot(res) + geom_point(aes(x=log2(baseMeanA),y=log2(baseMeanB),color=sig))
library(ggplot2)
#Make the plot
ggplot(res) + geom_point(aes(x=log2(baseMeanA),y=log2(baseMeanB),color=sig))
#Plot counts for the PGAZAT gene
plotCounts(dds, gene="AT2G41850", intgroup="genotype")
#Return the data table
plotCounts(dds, gene="AT2G41850", intgroup="genotype", returnData = TRUE)
pgazat <- plotCounts(dds, gene="AT2G41850", intgroup="genotype", returnData = TRUE)
